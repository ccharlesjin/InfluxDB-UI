
# #user  nobody;
# worker_processes  1;

# #error_log  logs/error.log;
# #error_log  logs/error.log  notice;
# #error_log  logs/error.log  info;

# # 全局错误日志级别
# error_log logs/error.log debug;

# #pid        logs/nginx.pid;


# events {
#     worker_connections  1024;
# }


# http {
#     include       mime.types;
#     default_type  application/octet-stream;

#     #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#     #                  '$status $body_bytes_sent "$http_referer" '
#     #                  '"$http_user_agent" "$http_x_forwarded_for"';

#     #access_log  logs/access.log  main;

#     sendfile        on;
#     #tcp_nopush     on;

#     #keepalive_timeout  0;
#     keepalive_timeout  65;

#     #gzip  on;

#     # server {
#     #     listen       80;
#     #     server_name  localhost;

#     #     #charset koi8-r;

#     #     #access_log  logs/host.access.log  main;

#     #     location / {
#     #         root   html;
#     #         index  index.html index.htm;
#     #     }

#     #     #error_page  404              /404.html;

#     #     # redirect server error pages to the static page /50x.html
#     #     #
#     #     error_page   500 502 503 504  /50x.html;
#     #     location = /50x.html {
#     #         root   html;
#     #     }

#     #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
#     #     #
#     #     #location ~ \.php$ {
#     #     #    proxy_pass   http://127.0.0.1;
#     #     #}

#     #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#     #     #
#     #     #location ~ \.php$ {
#     #     #    root           html;
#     #     #    fastcgi_pass   127.0.0.1:9000;
#     #     #    fastcgi_index  index.php;
#     #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#     #     #    include        fastcgi_params;
#     #     #}

#     #     # deny access to .htaccess files, if Apache's document root
#     #     # concurs with nginx's one
#     #     #
#     #     #location ~ /\.ht {
#     #     #    deny  all;
#     #     #}
#     # }
    
#     # HTTP to HTTPS redirection
#     server {
#         listen 80;
#         server_name localhost;
#         return 301 https://$host$request_uri;  # 将 HTTP 重定向到 HTTPS
    
#     }

#     # HTTPS server
#     server {
#         listen 443 ssl;  # 监听 443 端口，启用 SSL
#         server_name localhost;

#         # SSL 证书路径
#         ssl_certificate "E:/Tools/nginx-1.26.2/certificate.crt";
#         ssl_certificate_key "E:/Tools/nginx-1.26.2/private.key";

#         # 推荐的 SSL 配置
#         ssl_protocols TLSv1.2 TLSv1.3;
#         ssl_ciphers HIGH:!aNULL:!MD5;
#         ssl_prefer_server_ciphers on;

#         # 反向代理配置
#         location /grafana/ {
#             proxy_pass http://localhost:4000/;  # 代理到 Grafana
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;

#             # 将用户的用户名传递给Grafana
#             proxy_set_header X-WEBAUTH-USER $remote_user;

#             auth_basic "Restricted Access";
#             auth_basic_user_file "E:/Tools/nginx-1.26.2/.htpasswd";
            
#             # 这里添加 Authorization 头，使用 Bearer Token 认证
#             proxy_set_header Authorization "Bearer glsa_5JRK9x26gMYGpFmVEEroZh6ZmdYPAFUL_e44242c0";
            
#             # 其他头设置
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         # 错误页面配置
#         error_page 500 502 503 504 /50x.html;
#         location = /50x.html {
#             root   html;
#         }
#     }

#     # another virtual host using mix of IP-, name-, and port-based configuration
#     #
#     #server {
#     #    listen       8000;
#     #    listen       somename:8080;
#     #    server_name  somename  alias  another.alias;

#     #    location / {
#     #        root   html;
#     #        index  index.html index.htm;
#     #    }
#     #}


#     # HTTPS server
#     #
#     #server {
#     #    listen       443 ssl;
#     #    server_name  localhost;

#     #    ssl_certificate      cert.pem;
#     #    ssl_certificate_key  cert.key;

#     #    ssl_session_cache    shared:SSL:1m;
#     #    ssl_session_timeout  5m;

#     #    ssl_ciphers  HIGH:!aNULL:!MD5;
#     #    ssl_prefer_server_ciphers  on;

#     #    location / {
#     #        root   html;
#     #        index  index.html index.htm;
#     #    }
#     #}

# }
# 全局错误日志级别
error_log logs/error.log;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # 日志配置
    access_log logs/access.log;
    error_log logs/error.log debug;

    # SSL 配置（如果使用 HTTPS）
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_webauth_user" "$upstream_http_x_webauth_user"';

    access_log logs/access2.log custom;

    # server {
    #     listen 80;
    #     server_name localhost 127.0.0.1;
    #     return 301 https://$host$request_uri;  # 将所有HTTP请求重定向到HTTPS
    # }

    server {
        listen       443 ssl;
        # listen 80;
        server_name  localhost;
        
        # SSL 证书路径
        ssl_certificate "C:\Users\Charles\Desktop\SEP\after_mid\InfluxUI-PG05\backend\certificate.crt";
        ssl_certificate_key "C:\Users\Charles\Desktop\SEP\after_mid\InfluxUI-PG05\backend\private.key";
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Optional: disable strict SSL verification
        ssl_verify_client off;

        # 错误日志级别
        error_log logs/error.log debug;
        
        # 定义验证请求
        location /auth {
            internal;
            proxy_pass https://localhost:5001/api/auth/verify;  # 请求后端API
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Cookie $http_cookie;  # 传递cookie到后端验证
        }

        location /auth-required {
            return 401 'Authorization Required';
            add_header Content-Type text/plain;
        }

        location /grafana/api/live/ws {
            proxy_pass http://localhost:4000;
            proxy_set_header X-WEBAUTH-USER authenticated_user;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # 不进行auth_request验证
        }

        # 反向代理到 Grafana
        location /grafana/ {
            
            # 发送请求到验证API，验证成功才继续请求Grafana
            auth_request /auth;  # 向后端发送一个验证请求
            # 如果验证失败，跳转到401错误页面
            error_page 401 /auth-required;

            # WebSocket 请求特有配置
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;


            # proxy_set_header X-WEBAUTH-USER $http_x_webauth_user;
            proxy_set_header X-WEBAUTH-USER authenticated_user;

            # 代理设置
            proxy_pass http://localhost:4000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 解决子路径问题的额外配置
            proxy_redirect off;


        }

    }
}
